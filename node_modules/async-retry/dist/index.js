'use strict';

// Packages
var retrier = require('retry');

module.exports = function (fn, opts) {
  opts = opts || {};

  return new Promise(function (resolve, reject) {
    var op = retrier.operation(opts);

    // we allow the user to abort retrying
    // this makes sense in the cases where
    // knowledge is obtained that retrying
    // would be futile (e.g.: auth errors)
    var bail = function bail(err) {
      return reject(err || new Error('Aborted'));
    };

    var onError = function onError(err) {
      if (err.bail) {
        return bail(err);
      }
      if (!op.retry(err)) {
        reject(op.mainError());
      } else if (opts.onRetry) {
        opts.onRetry(err);
      }
    };

    op.attempt(function (num) {
      var val = void 0;

      try {
        val = fn(bail, num);
      } catch (err) {
        return onError(err);
      }

      if (val instanceof Promise) {
        val.then(resolve, onError);
      } else {
        resolve(val);
      }
    });
  });
};

